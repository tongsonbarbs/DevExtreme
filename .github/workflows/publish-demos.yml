name: Publishing to GitHub Pages step 1 (to branch)

on:
  workflow_dispatch:

jobs:
  build-devextreme-all:
    runs-on: ubuntu-latest
    name: Build DevExtreme + wrappers
    timeout-minutes: 20

    steps:
    - name: Get sources
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - uses: pnpm/action-setup@v3
      with:
        version: 9
        run_install: false

    - uses: actions/cache@v4
      name: Setup pnpm cache
      with:
        path: |
          ${{ env.STORE_PATH }}
          .nx/cache
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store

    - name: Install dependencies
      run: |
        corepack enable
        pnpm install

    - name: DevExtreme - Build-all
      env:
        BUILD_TEST_INTERNAL_PACKAGE: true
      run: pnpm run all:build-dev

    - name: Move packages
      run: |
        mv ./packages/devextreme/artifacts/npm/devextreme/*.tgz ./devextreme-installer.tgz
        mv ./packages/devextreme/artifacts/npm/devextreme-dist/*.tgz ./devextreme-dist-installer.tgz
        mv ./packages/devextreme-angular/npm/dist/*.tgz ./devextreme-angular-installer.tgz
        mv ./packages/devextreme-react/npm/*.tgz ./devextreme-react-installer.tgz
        mv ./packages/devextreme-vue/npm/*.tgz ./devextreme-vue-installer.tgz

    - name: Copy build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: devextreme-sources
        path: |
          devextreme-installer.tgz
          devextreme-dist-installer.tgz
          devextreme-angular-installer.tgz
          devextreme-react-installer.tgz
          devextreme-vue-installer.tgz
        retention-days: 1
  
  publish-ES:
    runs-on: ubuntu-latest
    needs: [build-devextreme-all]
    steps:
    - name: Get sources
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Download devextreme sources
      uses: actions/download-artifact@v4
      with:
        name: devextreme-sources

    - uses: pnpm/action-setup@v3
      with:
        version: 9
        run_install: false

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - uses: actions/cache@v4
      name: Setup pnpm cache
      with:
        path: |
          ${{ env.STORE_PATH }}
          .nx/cache
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store

    - name: Install dependencies
      run: |
        corepack enable
        pnpm install

    - name: Install tgz
      working-directory: apps/demos
      run: pnpm add ../../devextreme-installer.tgz ../../devextreme-dist-installer.tgz ../../devextreme-react-installer.tgz ../../devextreme-vue-installer.tgz ../../devextreme-angular-installer.tgz

    - name: Prepare configs
      working-directory: apps/demos
      run: pnpm run prepare-js
    
    - name: Copy metadata
      working-directory: apps/demos
      run: pnpm run make-demos-bundle --copy-metadata

    - name: Prepare React demo bundles
      working-directory: apps/demos
      run: pnpm run make-demos-bundle --framework="React"

    - name: Prepare Vue demo bundles
      working-directory: apps/demos
      run: pnpm run make-demos-bundle --framework="Vue"

    - name: Save publish-demos directory for ES as an artifact
      uses: actions/upload-artifact@v4
      with:
        name: publish-demos
        path: ./apps/demos/publish-demos

  publish-angular:
    runs-on: ubuntu-latest
    needs: [build-devextreme-all]
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Check generated demos (1/10)
            command: CONSTEL=1/10 pnpm run make-demos-bundle --framework="Angular"
          - name: Check generated demos (2/10)
            command: CONSTEL=2/10 pnpm run make-demos-bundle --framework="Angular"
          - name: Check generated demos (3/10)
            command: CONSTEL=3/10 pnpm run make-demos-bundle --framework="Angular"
          - name: Check generated demos (4/10)
            command: CONSTEL=4/10 pnpm run make-demos-bundle --framework="Angular"
          - name: Check generated demos (5/10)
            command: CONSTEL=5/10 pnpm run make-demos-bundle --framework="Angular"
          - name: Check generated demos (6/10)
            command: CONSTEL=6/10 pnpm run make-demos-bundle --framework="Angular"
          - name: Check generated demos (7/10)
            command: CONSTEL=7/10 pnpm run make-demos-bundle --framework="Angular"
          - name: Check generated demos (8/10)
            command: CONSTEL=8/10 pnpm run make-demos-bundle --framework="Angular"
          - name: Check generated demos (9/10)
            command: CONSTEL=9/10 pnpm run make-demos-bundle --framework="Angular"
          - name: Check generated demos (10/10)
            command: CONSTEL=10/10 pnpm run make-demos-bundle --framework="Angular"
    steps:
    - name: Get sources
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Download devextreme sources
      uses: actions/download-artifact@v4
      with:
        name: devextreme-sources

    - uses: pnpm/action-setup@v3
      with:
        version: 9
        run_install: false

    - name: Get pnpm store directory
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

    - uses: actions/cache@v4
      name: Setup pnpm cache
      with:
        path: |
          ${{ env.STORE_PATH }}
          .nx/cache
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store

    - name: Install dependencies
      run: |
        corepack enable
        pnpm install

    - name: Install tgz
      working-directory: apps/demos
      run: pnpm add ../../devextreme-installer.tgz ../../devextreme-dist-installer.tgz ../../devextreme-react-installer.tgz ../../devextreme-vue-installer.tgz ../../devextreme-angular-installer.tgz

    - name: Prepare configs
      working-directory: apps/demos
      run: pnpm run prepare-js

    - name: Copy metadata
      working-directory: apps/demos
      run: pnpm run make-demos-bundle --copy-metadata

    - name: Update angular.json
      working-directory: apps/demos
      run: pnpm run update-angular-json

    - name: Prepare Angular demo bundles
      working-directory: apps/demos
      run: |
        ${{ matrix.command }}

    - name: Angular post process index.html
      working-directory: apps/demos
      run: pnpm run post-process-angular
    
    - name: Save publish-demos directory for Angular as an artifact
      uses: actions/upload-artifact@v3
      with:
        name: publish-demos
        path: ./apps/demos/publish-demos

  deploy:
    runs-on: ubuntu-latest
    needs: [build-devextreme-all, publish-ES, publish-angular]
    steps: 
      - name: Download publish-demos artifact
        uses: actions/download-artifact@v4
        with:
          name: publish-demos
          path: ./apps/demos/publish-demos
      - name: Deploy to gh-pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./apps/demos/publish-demos
